package org.exploit.jettyx.jackson;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.exploit.jettyx.exception.InvalidResponseBodyException;
import org.exploit.jettyx.mapper.HttpMapper;

import java.lang.reflect.Type;

public class JacksonHttpMapper implements HttpMapper {
    private final ObjectMapper objectMapper;

    public JacksonHttpMapper(ObjectMapper objectMapper) {
        this.objectMapper = objectMapper;
    }

    @Override
    public boolean canSerialize(Type sourceType) {
        if (sourceType instanceof Class<?> clazz)
            return objectMapper.canSerialize(clazz);

        return false;
    }

    @Override
    public boolean canDeserialize(Type targetType) {
        return objectMapper.canDeserialize(objectMapper.constructType(targetType));
    }

    @Override
    public String getContentType() {
        return "application/json";
    }

    @Override
    public byte[] serialize(Object object) {
        try {
            return objectMapper.writeValueAsBytes(object);
        } catch (JsonProcessingException e) {
            throw new IllegalArgumentException("Couldn't serialize: ", e);
        }
    }

    @Override
    public Object convert(byte[] body, Type type) {
        try {
            return objectMapper.readValue(body, objectMapper.constructType(type));
        } catch (Exception e) {
            throw new InvalidResponseBodyException(body);
        }
    }

    public static JacksonHttpMapper create(ObjectMapper objectMapper) {
        return new JacksonHttpMapper(objectMapper);
    }

    public static JacksonHttpMapper create() {
        return create(new ObjectMapper());
    }
}