package org.exploit.jettyx.core.url;

import java.net.URI;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashMap;
import java.util.Map;
import java.util.stream.Collectors;

public class UrlBuilder {
    private String baseUrl;
    private String path;

    private final Map<String, String> queryParams = new HashMap<>();

    public UrlBuilder baseUrl(String baseUrl) {
        if (baseUrl.endsWith("/")) {
            this.baseUrl = baseUrl.substring(0, baseUrl.length() - 1);
        } else {
            this.baseUrl = baseUrl;
        }
        return this;
    }

    public UrlBuilder path(String path) {
        if (path.startsWith("/")) {
            this.path = path.substring(1);
        } else {
            this.path = path;
        }
        return this;
    }

    public UrlBuilder placeholder(String placeholder, String value) {
        this.path = path.replace(PLACEHOLDER_PATTERN.formatted(placeholder), value);
        return this;
    }

    public UrlBuilder queryParam(String key, String value) {
        this.queryParams.put(key, value);
        return this;
    }

    public URI build() {
        return URI.create(buildString());
    }

    public String buildString() {
        var url = baseUrl + "/" + path;

        if (!queryParams.isEmpty()) {
            url += "?" + queryParams.entrySet().stream()
                    .map(entry -> encoded(entry.getKey()) + "=" + encoded(entry.getValue()))
                    .collect(Collectors.joining("&"));
        }

        return url;
    }

    private static String encoded(String value) {
        return URLEncoder.encode(value, StandardCharsets.UTF_8);
    }

    private static final String PLACEHOLDER_PATTERN = "{%s}";
}