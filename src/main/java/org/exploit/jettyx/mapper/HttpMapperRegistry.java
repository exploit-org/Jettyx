package org.exploit.jettyx.mapper;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

public class HttpMapperRegistry {
    private final List<HttpMapper> httpMappers = new ArrayList<>(List.of(
            new NoHttpMapper()
    ));

    public HttpMapperRegistry(List<HttpMapper> httpMappers) {
        this.httpMappers.addAll(httpMappers);
    }

    public HttpMapperRegistry() {
        this(new ArrayList<>());
    }

    public Optional<HttpMapper> findCanSerialize(Type type) {
        return httpMappers.stream()
                .filter(mapper -> mapper.canSerialize(type))
                .findFirst();
    }

    public void addMapper(HttpMapper mapper) {
        httpMappers.add(mapper);
    }

    @SuppressWarnings("unchecked")
    public <T extends HttpMapper> Optional<T> getMapper(Class<T> clazz) {
        return httpMappers.stream()
                .filter(mapper -> mapper.getClass().equals(clazz))
                .map(mapper -> (T) mapper)
                .findFirst();
    }

    public Optional<HttpMapper> findCanDeserialize(Type type) {
        return httpMappers.stream()
                .filter(mapper -> mapper.canDeserialize(type))
                .findFirst();
    }
}
